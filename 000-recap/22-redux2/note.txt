npm install redux react-redux


- Create redux store folder (to put redux logic)
src > store > index.js 


- Import redux and createStore, export default store : it's a bit different than first lecture so checkout the index.js file


- Providing store (index.js)
1. import { Provider } from "react-redux"; // a component
2. import store from "./store/index.js"; // import created store
3. const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);
====> wrap it and provide it 


- Using redux data in React Components 
    let's say we want to show counter at the Counter component 

    > useSelector => let us use part of state manage by the store 
      import { useSelector } from 'react-redux';

    > execute the part of the state we want.
    then react redux automatically set up the subscription to the redux store for this component.
    then my component will be updated and receive the "latest counter" whenever data changes.
    when it's unmount, react redux automatically clear the subscribtion.
      const counter = useSelector(state => state.counter);

    > display counter value
      <div className={classes.value}>{counter}</div>


- Deispatching actions from inside components 

  > import useDispatch
    import { useSelector, useDispatch } from "react-redux";

  > store in var 
    const dispatch = useDispatch(); // a funtion

  > create handler
    const incrementHandler = () => {
      dispatch({ type: "increment" });
    };
  
  > use it 
    <button onClick={incrementHandler}>Increment</button>


- Attaching payloads to actions 
  : flexible playload

  > create new reducer function in store 
    if (action.type === "increse") {
      return {
        counter: state.counter + action.amount,
      };
    }
  
  > create new handler in component 
  : action value is flexible (this case we set as 5)
    const increseHandler = () => {
      dispatch({ type: "increse", amount: 5 });
    };

  > apply it to the button 
    <button onClick={increseHandler}>Increse by 5</button>


- Working with "multiple state" properties 

  ((store))
  > create initialState var 
    const initialState = { counter: 0, showCounter: true };
  
  > apply to reducer 
    const counterReducer = (state = initialState, action) => {

  > we should return both state from every actions to keep it as it is, overwrite the old state object 
    if (action.type === "increse") {
      return {
        counter: state.counter + action.amount,
        showCounter: state.showCounter,
      };
    }

     if (action.type === "toggle") {
        return {
          showCounter: !state.showCounter,
          counter: state.counter,
        };
      }
    
  (( component )) : we want to toggle the counter 
  > store showCounter state 
    const showCounter = useSelector(state => state.showCounter);

  > apply it to div block
    {showCounter && <div className={classes.value}>{counter}</div>}
  
  > create hanlder function
    const toggleCounterHandler = () => {
      dispatch({ type: "toggle" });
    };
  
  > apply it to button 
    <button onClick={toggleCounterHandler}>Toggle Counter</button>


- How to work with redux state correctly 
: we should "NEVER MUTATE" the state directly but "MUST OVERWRITE" existing state 

  > NEVER DO THIS !!!!
    if (action.type === "increment") {
      state.counter ++  <=== mutating state 

      return state;
    }
  
  this can lead bugs, unpredictable behaviour, and making debug app harder 

1. identifier 
  2. handling big data
  3. state immutability 

- Redux toolkit & adding state slices 

  > install redux toolkit
    npm install @reduxjs/toolkit
  
  > use it in the store - import createSlice 
    import { createSlice } from "@reduxjs/toolkit";

  > prepare slice of our global state
    *** redux toolkit will clone the state automatically so we don't need to worry about mutation
    *** redux toolkit also keeps the states we don't use but apply changes only

    createSlice({
      name: "counter",
      initialState,
      reducers: {
        increment(state) {
          // we can mutate the state here
          state.counter++; 
        },
        decrement(state) {
          state.counter--;
        },
        // action is needed when we have payload only
        increase(state, action) {
          state.counter = state.counter + action.amount;
        },
        toggle(state) {
          state.showCounter = !state.showCounter;
        },
      },
    });