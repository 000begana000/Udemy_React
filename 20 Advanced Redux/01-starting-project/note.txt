What is Redux? 

- A "state management system" for "crocess-component" or "app-wide" state = like useContext()




Redux vs useContext

"useContext has some potential disadvantages"
(but we can use both Redux and useContext in the same application)
- Deeply nested providers (too many providers)
- Complex providers (too much work in one provider)
- Not optimized for high-frequency changes




Core Redux Concept

- Central data (state) store
** we have ONLY ONE store for entire application **
- Components subscribe the store.
- Components NEVER directly manipulate the store data but we use Reducer function.
- Reducer function mutates(=changes) data in store. 
** it's NOT useReducer hook but general concept as like js reducer method ** 
- How we trigger this reducer function? we have "Actions" and components "Dispatch" actions. (we can say component trigger actions)
- Redux forwards actions to the reducer then this operation is performed by the reducer.
- When the state is updated, subscribing components are notified, so they can update their UI.




How to start redux in the react app

    1. import redux
        import { createStore } from "redux";

    2. create store and reducer function

    3. export default store 
        so we can connect it to react app

    4. import Provider in index.js 
        import { Provider } from "react-redux";

    5. wrap the App into Provider
        root.render(<Provider><App /></Provider>);

    6. import store and set a store props into Provider
        import store from "./store/index";
        <Provider store={store}>

    => it doesn't do anything yet.
        but now App and any child components can tap into the store 
        and they can get the data from store,
        they can set up a subscription to that data,
        they can dispatch actions.




How to use data in a component

    1. import useSelector hook in the component
        import { useSelector } from "react-redux";

    2. useSelector will be excuted by react redux, to retrieve the part of state we need in this component.
        const counter = useSelector((state) => state.counter);

        ** when you use useSelector react-redux will ""automatically set up a subscribtion"" to the redux store for this component. so your component will be ""updated"" and will ""receive the latest conter automatically"" whenever the data changes in Redux store and re-execute component function.




How to dispatch actions in a component

    1. import useDispatch hook in the component
        import { useDispatch } from "react-redux";

    
    2. call useDispatch function
        const dispatch = useDispatch()

        when we call useDispatch we don't pass any argument to it but instead this gives us back a dispatch function which we can execute.

    3. create handler functions and call the dispatch function
        const toggleCounterHandler = () => {
            dispatch({ type: "increment" });
        };




How to attach Payloads to Actions (recieve value from user)

    1. create a new handler function with new payload prop
        //amount = name of payload and we can receive input value instead of 5
        const increaseHandler = () => {
            dispatch({ type: "increase", amount: 5 }); 
        };


    2. point the new handler
        <button onClick={increaseHandler}>Increase by 5</button>

    3. create new if statement in reducer
        if (action.type === "increase") {
            return {
                counter: state.counter + action.amount,
            };
        }




How to add more state in our store?

    1. add new state to initial value 
        (in this case, showCounter)
        const initialState = { counter: 0, showCounter: true }
    
    2. even though increment action doesn't related to showCounter, return showCounter together because we are returning the overall state object 
        (redux won't merge your changes with the existing state)
        if (action.type === "increment") {
            return {
                counter: state.counter + 1,
                // the state we currently have 
                showCounter: state.showCounter
            };
        }

    3. add new if statement with new action type
        if (action.type === 'toggle') {
            return {
                showCounter: !state.showCounter,
                counter: state.counter
            }
        }

    4. dispatch the action from related component
        const toggleCounterHandler = () => {
            dispatch({ type: 'toggle'})
        };

    5. pick the state with useSelector to retrieve the part of state we need in this component and update UI when the data is changed.
        const show = useSelector((state) => state.showCounter);

    6. use the new state
        {show && <div className={classes.value}>{counter}</div>}




How to work with Redux state correctly

    1. returned object will NOT merged to the existing state but "OVERWRITING" the existing state.

    2. you should "NEVER MUTATE" the existing state - instead overwrite it by returning a brand new state object.
        : never change original state 
        (this can lead bugs and unpredictable behavior)

        // don't do this!!!!!
        if (action.type === "increment") {
            state.counter++ ;
            return state;
        }




How to use Redux Toolkit

    1. import redux Toolkit
        npm install @reduxjs/toolkit

    2. we can remove redux package from package.json because redux toolkit is includes redux 

    3. import createSlice in store
        import { createSlice } from "@reduxjs/toolkit";

    4. preparing slice of global state
        const initialState = { counter: 0, showCounter: true };
        createSlice({
            name: "counter", //as we want
            initialState, //initialState: initialState

            // methods - we don't need action parameter becuase these methods will automatically be called for you depending on which action was triggered.

            reducers: {
                increment() {},
                decrement() {},
                increase() {},
                toggleCounter() {},
            },
        });

    5. with redux Toolkit, we CAN'T accidently manipulate the existing state. because Redux Toolkit internally uses another package called imgur, which will detect code like this and automatically clone the existing state, create a new state object, keep all the state which we're not editing, and overwrite the state in an immutable way.
        increment(state) {
            state.counter++;
        },

    6. when we have payload, accept action as an parameter 
        increase(state, action) {
            state.counter = state.counter + action.amount;
        },




How to connect Redux Toolkit to store

    1. store the slice in const variable - it's responsible for working with our counter.
        const counterSlice = createSlice({})

    2. register our slice with our store
        const store = createStore(counterSlice.reducer);
        - with that we get access to the reducers set up in the slice 
    
    3. if we have more slices, we import configureStore function.
        import { configureStore } from "@reduxjs/toolkit";
        - it makees merging multiple reducers into one reducer easier.
    
    4. with configureStore we can set 1 global slice
        const store = configureStore({
            reducer: counterSlice.reducer,
        });

    5. or multiple reducers with key-value prop in an object (it merges into 1 big reducer)
        const store = configureStore({
            reducer: { counter: counterSlice.reducer },
        });




How to dispatch actions with Redux Toolkit 

    1. it automatically create unique identifier for our different reducers.

    2. access actions from slice name
        counterSlice.actions.toggleCounter();
            - it will returns an action object of this shape:
            { type: 'some auto-generated unique identifier' }
    
    3. we don't have to worry about creating action objects on our own, coming up with unique identifiers, and typos.

    4. based on this knowledge, we export actions.
        export const counterActions = counterSlice.actions

    5. import actions from where we need to use (component)
        import { counterActions } from "../store/index";
    
    6. dispatch action 
        const incrementHandler = () => {
            dispatch(counterActions.increment());
        };

    7. this is how to work with payload :
        const increaseHandler = () => {
            dispatch(counterActions.increase(10)); 
            //{type: SOME_UNIQUE_IDENTIFIER, payload: 10}
        };

    8. edit slice (action.amount => action.payload)
        increase(state, action) {
            state.counter = state.counter + action.payload; 
        }




How to work with multiple slices

    const store = configureStore({
    reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },
    });

    export const counterActions = counterSlice.actions;
    export const authActions = authSlice.actions;




Split files 

    1. create separate files 

    2. export default reducer
        export default auth.reducer;

    3. import reducer
        import authReducer from "./auth";

    4. merge reducers 
        const store = configureStore({
        reducer: { counter: counterReducer, auth: authReducer },
        });
    
    5. export actions in the local file 
        export const counterActions = counter.actions;


Class based component ((optional))

    1. import Component from react 
        import { Component } from "react";

    2. build a component from scratch (but this doesn't have state)
        class Counter extends Component {
            render() {
                return (
                <main className={classes.counter}>
                    <h1>Redux Counter</h1>
                    <div className={classes.value}>{counter}</div>
                    <div>
                    <button onClick={incrementHandler}>Increment</button>
                    <button onClick={decrementHandler}>Decrement</button>
                    </div>
                    <button onClick={toggleCounterHandler}>Toggle Counter</button>
                </main>
                );
            }
        }

    3. create handler functions and point them with this keyword
        incrementHandler() {}
        <button onClick={this.incrementHandler}>Increment</button>

    4. import connect hook from react-redux to connect class-based component to redux
        import { connect } from "react-redux";

    5. use connect 
        export default connect()(Counter);
        - we execute connect function then it returns a new function and we execute this returned, this new function as well. and to this returned function, we pass counter.

        - connect wants 2 arguemnts and both of them are functions.
            export default connect(mapStateToProps, mapDispatchToProps)(Counter);

        - set 2 argument functions 
            a function that maps Redux state to props which will be received in this component then.

            // we must use this name for it
            const mapStateToProps = (state) => {
            // it returns a object
                return {
                    counter: state.counter, // we pick up conter state and bind it to counter prop (equivalent to useSelector)
                };
            };

            // equivalent to useDispatch
            const mapDispatchToProps = (dispatch) => {
                return {
                    increment: () => dispatch({ type: "increment" }),
                    decrement: () => dispatch({ type: "decrement" }),
                };
            };
    
    6. use props 
        incrementHandler() {
            this.props.increment();
        }

        <div className={classes.value}>{this.props.counter}</div>

    7. use bind(this) for handlers so it refers to this keyword of this class for sure
        <button onClick={this.incrementHandler.bind(this)}>Increment</button>