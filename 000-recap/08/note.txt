// Ref

import { useRef } from 'react';

const playerName = useRef();

<input ref={playerName} type='text' />

- ref is always a javascript object has current property only.
through current property, I can access all the methods and properties that are exposed by the native input HTML element.
function handleClick() {
    playerName.current.value;
}

- update state
function handleClick() {
    setEnteredPlayerName(playerName.current.value);
}

<h2>
    {enteredPlayerName ? enteredPlayerName : 'unknown entity'}
</h2>

=> {enteredPlayerName ?? 'unknown entity'}
JS expression: if left is truthy, output it, else the right 

=> {enteredPlayerName || 'unknown entity'}
if left falthy, output it, else right 
(if left is truthy, else output right)


// Clear input after submit

(playerName is ref)
playerName.current.value = '';


// Ref can't be used instead of state because it doesn't re-render the component

<state>
- causes component re-evaluation (re-execution) when changed
- should be used for values that are directly reflected in the UI
- should not be used for "behind the scenes" values that have no direct UI impact

<refs>
- do not cause component re-evaluation when changed
- can be used to gain direct DOM element access (-> great for reading values or accessing certain browser APIs)


// We can use Refs to manage any kind of value, not only to HTML elements


// Another Ref usage
- when we need a value that doesn't re-evaluate when the UI updated
- when the value is not related to UI but behind the scene

export default function TimerChallenge({ title, targetTime }) {
  const timer = useRef();

  const [timerStarted, setTimerStarted] = useState(false);
  const [timerExpired, setTimerExpired] = useState(false);

  function handleStart() {
    setTimerStarted(true);

    timer.current = setTimeout(() => {
      setTimerExpired(true);
    }, targetTime * 1000);
  }

  function handleStop() {
    clearTimeout(timer.current);
    setTimerStarted(false);
  }


// Create Modal with <dialog>
- if you add a form with the method set to dialog inside of a dialog, a button that submits the form will "close the dialog" without any extra JS or anything like that required.

- use "onSubmit" to form element to execute onClick on the button in the form

- dialog tag default is invisible and we need to make it visible with "open" tag.

<dialog className="result-modal" open>
    <h2>you {result}</h2>
    <form method="dialog" onSubmit={onReset}>
        <button>Close</button>
    </form>
</dialog>


// useImperativeHandle
- useImperativeHandle lets you customize or restrict by exposing only specific methods or properties, rather than the whole object. It's particularly useful when you need to provide a controlled interface, such as custom method.

(TimerChallenge.jsx)
const timer = useRef();

function handleStart() {
  setTimerStarted(true);

  timer.current = setTimeout(() => {
    // player will lose when this function is called because player couldn't stop the timer before it's expired
    setTimerExpired(true);

    // execute showModal() when timer is expired
    // open() method is from ResultModal of useImperativeHandle
    dialog.current.open();
  }, targetTime * 1000);
}

<ResultModal ref={dialog} targetTime={targetTime} result="lost" />
<button onClick={timerStarted ? handleStop : handleStart}>
  {timerStarted ? "Stop" : "Start"} Challenge
</button>

(ResultModal.jsx)
import { useImperativeHandle, useRef } from "react";

// refers the dialog ref from TimerChallenge.jsx 
const dialog = useRef();

// let your function be executed outside of this component
useImperativeHandle(ref, () => {
  return {
    open() {
      dialog.current.showModal();
    },
  };
});

return (
  <dialog ref={dialog} className="result-modal">


// setInterval
- setInterval execute the code every X millisecond (this case 10millisec.)
timer.current = setInterval(() => {
  setTimeRemaining(prevTimeRemaining => prevTimeRemaining - 10);
}, 10);

- clear
clearInterval(timer.current);

- prevent infinite loop because it's in if statement
if (timeRemaining <= 0) {
  clearInterval(timer.current);
  dialog.current.open();
}


// Format number until 2 decimal
const formattedRemainingTime = (remainingTime / 1000).toFixed(2);