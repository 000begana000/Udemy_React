// ...props for custom component
=> this syntax groups all remaining object properties into a new object (named "props" in this case)

export default function Section({ title, children, ...props }) {
  return (
    <section {...props}>
      <h2>{title}</h2>
      {children}
    </section>
  );
}
(Examples.jsx)
<Section title="Examples" id="examples">

export default function TabButton({ children, isSelected, ...props }) {
  return (
    <li>
      <button className={isSelected ? "active" : undefined} {...props}>
        {children}
      </button>
    </li>
  );
}
(Examples.jsx)
<TabButton
    isSelected={selectedTopic === "jsx"}
    onClick={() => handleClick("jsx")}
>


// reuseable Tabs component
export default function Tabs({ children, buttons }) {
  return (
    <>
      <menu>{buttons}</menu>
      {children}
    </>
  );
}
(Examples.jsx)
<Tabs
    buttons={
        <>
        <TabButton
            isSelected={selectedTopic === "components"}
            onClick={() => handleClick("components")}
        >
            Components
        </TabButton>
        <TabButton
            isSelected={selectedTopic === "jsx"}
            onClick={() => handleClick("jsx")}
        >
            JSX
        </TabButton>
        <TabButton
            isSelected={selectedTopic === "props"}
            onClick={() => handleClick("props")}
        >
            Props
        </TabButton>
        <TabButton
            isSelected={selectedTopic === "state"}
            onClick={() => handleClick("state")}
        >
            State
        </TabButton>
        </>
    }
>
{tabContent}
</Tabs>


// Setting component tabs dynamically
export default function Tabs({ children, buttons, ButtonsContainer }) {
  // const ButtonsContainer = buttonsContainer;
  return (
    <>
      <ButtonsContainer>{buttons}</ButtonsContainer>
      {children}
    </>
  );
}
(Examples.jsx)
 <Tabs
        ButtonsContainer="menu" (built-in)  ===> ButtonsContainer={Section} (custom)
        buttons={
          <>
            <TabButton
              isSelected={selectedTopic === "components"}
              onClick={() => handleClick("components")}
            >