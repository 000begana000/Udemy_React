Using form actions
- form actions & custom submission handling
- extracting values & managing form state
- synchronous & asynchronous actions 
- optimistic UI updating


// What are form actions?

- we can use this feature from react ver.19

- instead of onSubmit attr., use action prop 
- React kind of overrides this attribute, this prop, a value to action, will be executed when the form is submitted.
- react reset the form automatically with action attr. too.

<form action={signupAction}>
// default action = define url/path to send the form data 

- with action, we will get formData, not event 
- and this formData has all the input data (this case, email)

function signupAction(formData) {
    const enteredEamil = formData.get("email");
    console.log(enteredEamil);
  }

- don't forget to create name attr. for this feature (identifier of data)

<input id="email" type="email" name="email" />



// Adding Validation Checks 

- extract all the form data we get at the signupAction function
    function signupAction(formData) {
        const email = formData.get("email");
        ...
        const acquisitionChannel = formData.getAll("acquisition"); // multiple
    }

- create errors array
    let errors = [];

- checks the condition (validate) and push the errors to the errors array (functions are from validation.js)
    // email validation
    if (!isEmail(email)) {
      errors.push("Invalid email address.");
    }

    // confirm password validation
    if (!isEqualToOtherValue(password, confirmPassword)) {
      errors.push("Passwords do not match.");
    }

    // full name validation
    if (isEmpty(firstName) || isEmpty(lastName)) {
      errors.push("First name and last name are required.");
    }

    // terms and conditions validation
    if (!terms) {
      errors.push("You must agree to the terms and conditions.");
    }

    // acquisition channel validation
    if (acquisitionChannel.length === 0) {
      errors.push("Please select at least one acquisition channel.");
    }


// Managing form-dependent state with useActionState()

- how can we refer values via action prop?
    <form action={signupAction}>   <===

- via useActionState :
    import { useActionState } from "react";

- before we use the action state, let's return object
    function signupAction(formData) {
        .....(prevCode)

        //// if there are errors, return them
        if (errors.length > 0) {
            return { errors };
        }

        //// if there are no errors, return null
        return { errors: null };
    }

- formState = form state value, which is returned from the action function
- formAction = form action(signupAction) inhanced by react, with extra features with react aware of the form state
- pending = boolean value to check if the form is submitted or not
- useActionState(function, initialValue)

    const [formState, formAction, pending] = useActionState(signupAction, {
        errors: null,
    });


- call formAction to form action tag
    <form action={formAction}>


- use prevFormState in the action function to prevent error
- when action function is called by useActionState, react gives you the last form state - so first argument is the last form state 
    function signupAction(prevFormState, formData) {


- display error message when there is error
    {formState.errors && (
        <ul className="error">
          {formState.errors.map(error => (
            <li key={error}>{error}</li>
          ))}
        </ul>
    )}


// Using User Input
: to prevent losing input value after validation 

- return enteredValues from action function

    function signupAction(prevFormState, formData) {
        if (errors.length > 0) {
            return {
                errors,
                enteredValues: {
                email,
                password,
                confirmPassword,
                firstName,
                lastName,
                role,
                terms,
                acquisitionChannel,
                },
            };
        }

        // when there is no error, form will be empty
        return { errors: null };
    }

- defaultValue : the value will be set when the input is reset
- when there is enteredValue only, it will be applied to defaultValue
- otherwise defaultValue will be set undefined 

    // email
    defaultValue={formState.enteredValues?.email}

    // role (select) : but it's always select the first value after validation => how could we fix it?
    defaultValue={formState.enteredValues?.role}

    // acquisitionChannel (array)
    defaultChecked={formState.enteredValues?.acquisitionChannel?.includes(
        "google"
    )}

    // terms
    defaultChecked={formState.enteredValues?.terems}