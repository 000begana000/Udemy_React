Food order app
(components, state, context, effects, HTTP Requests & model)

- builidng a complete project from the ground up
- building & configuring components
- using state & context
- managing HTTP requests & side effects


1. make a sketch of tne app


2. build core components and add more features later 
    1) add the header component 
    2) add the meals-related components & the logic to fetch meals data from backend
    3) add cart logic (add items to cart, edit cart items) & checkout page logic 


3. when I need to manage state and worry about prop drilling - "useContext"


3.1. CartContextProvider can be shorten from react ver.19

function CartContextProvider() {
  return <CartContext.Provider></CartContext.Provider>;
}

function CartContextProvider() {
  return <CartContext></CartContextr>;
}

3.2. dispatch payload doesn't need to be named as payload

function addItem(item) {
    dispatchCartAction({
      type: "ADD_ITEM",
      item,
    });
  }


4. Working with modal - don't forget 3 things.

4.1 Connection to the state or context
    <Modal open={userProgressCtx.progress === "checkout"}>

4.2 import component to App 

4.3 ESC key will bring bug (can't open modal anymore) : add onClose 
    (Modal.jsx)
    export default function Modal({ ..., onClose})
    <dialog .... onClose={onClose}>
    ...

    (Cart.jsx) : prevent close everything when we click go to checkout  
    <Modal className="cart" open={userProgressCtx.progress === "cart"} onClose={userProgressCtx.progress === "cart" ? handleCloseCart : null}>

    (Checkout.jsx) : simply connect to close function
    <Modal
      open={userProgressCtx.progress === "checkout"}
      onClose={handleCloseCheckout}
    >

5. why preventDefault?
    - default http request won't be created and set - therefore we have change to handle what has to happen when the form is submitted

    function handleSubmit(event) {
        event.preventDefault(); 
      }

6. how to extract datas via FormData

    const fd = new FormData(event.target);
    const customerData = Object.fromEntries(fd.entries()); // {email: text@example.com}