1. build Header 

2. build Meals - simple ver. of fetching, map meal names only 

3. create MealItem - article, div(name(h3), price(p), description(p)), p(button)
    <img src={`http://localhost:3000/${meal.image}`} alt={meal.name} />

4. improve buttons and price in MealItem

5. create price - src/util/formatting.js (currencyFormatter / new Intl.NumberFormat)

6. button - component/UI/Button.jsx
    (children, textOnly, cssClasses(text-button / button + className) ...props)

7. use Button for Header(textOnly), MealItem(pure)

8. Add to cart button (Cart (0) update) => useContext()
    src/store/CartContext.jsx
    const CartContext = createContext({
        items: [],
        addItem: item => {},
        removeItem: id => {},
    });

    build "addItem" logic : add new item with quantity: 1, otherwise find existing item and add quantity + 1

    - find index of the item first
    - copy of old array (immutable way)
    - when the item exist, each out to the existing item and add 1 quantity and update updatedItems with updatedItem 
    - if item doesn't exist, create quantity prop and adding 1
    - return { ...state, items: updatedItems }


    build "removeItem" logic : if quantity is greater than 1, we reduce quantity else if it's equal to 1, remove item from the shopping cart

    - find exisitng item index first
    - find existingCartItem
    - copy the old item state in new array (immutable)
    - quantity === 1 :remove the item with splice
    - quantity > 1 : quantity -1 and updatedItems[existingItemIndex] = updatedItem;
    - finally  return { ...state, items: updatedItems };


    import CartContextProvider to App 


    implement addItem (handleAddMealToCart) in MealItem 


    show the item number in Header Cart with Reduce method & context 

    const totalCartItems = cartCtx.items.reduce((totalNumberOfItems, item) => {
        return totalNumberOfItems + item.quantity;
    }, 0);


9. Create Modal component for Cart (0) 
    - we can use this modal anywhere in our component but opens up in one place (createPortal)
    - use useEffect() to interact with open prop correctly 
    - open the dialog programmatically with useRef() so we can use overlay feature - showModal()
    - give a dynamic className(default = "") so we can style it from outside as well

10. Create Cart component, import Modal & apply it
    - give extra style to Modal("cart")
    - iterate item names and quantity via CartContext (name - quantity)
    - below that, <p className="cart-total">{currencyFormatter.format(cartTotal)}</p> : hint for cartTotal : reduce, item.price * item.quantity
    - below that,  <p className="modal-actions">
        <Button textOnly>Close</Button>
        <Button>Go to Checkout</Button>

11. Create UserProgressContext to handle open & closing Modal 