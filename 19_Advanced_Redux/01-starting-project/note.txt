Redux & Side Effects (and Asynchronous Code)

    - Reducers must be 'pure, side-effect free, synchronous' functions
    => Never send fetch in our reducer!



    
Where should side-effects & async tasks be executed?

    => inside the 'components' (via useEffect())
    => insde the 'action creators' (we write our own)




Fetch data inside the components
    1. get our current cart with useSelector before it's updated
    2. do all the transfomation which is doing in reducer "without mutating state"
    3. send a request




Fat Reducers vs Fat Components vs Fat Actions

    - Where should your logic(=code) go?
    1. synchronous, side-effect free code (i.e. data transformations)
        => Prefer reducers <=
        Avoid action creators or components 
    2. Async code or code with side-effects
        => Never use Reducers! <=
        Prefer action creators or components 




So How to send request to server?

    1. update Redux store 
    2. select updated store to send the request 

    ** select store & when there is change, send request to server
    => with this way we can keep the logic in reducer & send the request in component (dividing work)

    (App) - but it can be any file 

    const cart = useSelector((state) => state.cart);

    useEffect(() => {
        fetch("https://dummy-59bc5-default-rtdb.firebaseio.com/cart.json", {
        // PUT method will overwrite cart data with new cart data
        method: "PUT",
        body: JSON.stringify(cart),
        });
    }, [cart]);

    => check App.js how we handled notification (we added a state in ui slice too)


    ** A Problem with useEffect()
        We face one problem when using useEffect the way we currently do it: It will execute when our app starts.
        Why is this an issue?
        It's a problem because this will send the initial (i.e. empty) cart to our backend and overwrite any data stored there.

    1. create const isInitial outside of component 
        let isInitial = true;

    2. just before call the fetch async function set a protection cause so it won't work when application has started
        if (isInitial) {
            isInitial = false;
            return;
        }




 How to fetch data inside action creator => we can keep our code but with this way we can keep our component code lean

    What is Thunk? 
        a function that "delays an action" until later, until something else finished.
        => an action creator function that does "NOT return the action itself" but instead "another function" which "eventually" returns the action

    How to create custom action creator

        1. go to the relavant slice file and create a function after slice 
            const sendCartData = (cartData) => {
                return { type: "", payload: "" };
            };

        2. instaed of returns action object we can return another function
            const sendCartData = (cartData) => {
                return (dispatch) => {
                    dispatch();
                }
            };
        
        3. implement all the functions in component into this custom action creator
            export const sendCartData = (cart) => {
                return async (dispatch) => {
                    dispatch(
                    uiActions.showNotification({
                        status: "pending",
                        title: "Sending...",
                        message: "Sending cart data!",
                    })
                    );

                    const senddRequest = async () => {
                    const response = await fetch(
                        "https://dummy-59bc5-default-rtdb.firebaseio.com/cart.json",
                        {
                        // PUT method will overwrite cart data with new cart data
                        method: "PUT",
                        body: JSON.stringify(cart),
                        }
                    );

                    if (!response.ok) {
                        throw new Error("Sending cart data failed");
                    }
                    };

                    try {
                    await senddRequest();

                    dispatch(
                        uiActions.showNotification({
                        status: "success",
                        title: "Success!",
                        message: "Sent cart data successfully!",
                        })
                    );
                    } catch (error) {
                    dispatch(
                        uiActions.showNotification({
                        status: "error",
                        title: "Error!",
                        message: "Sending cart data failed!",
                        })
                    );
                    }
                };
                };

        4. import custom action creator and dispatch it in useEffect() in App (or in a component where fetching data)
            useEffect(() => {
                if (isInitial) {
                    isInitial = false;
                    return;
                }

                dispatch(sendCartData(cart));
            }, [cart, dispatch]);


        5. the code above might look weird but react redux will call the function inside of dispatch even though it's not a action object, and when we use dispatch as argument in the returning function, we can dispatch something again inside of return function. => this is built-in when we use redux toolkit.