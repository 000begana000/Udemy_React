What is Redux? 

- A "state management system" for "crocess-component" or "app-wide" state = like useContext()




Redux vs useContext

"useContext has some potential disadvantages"
(but we can use both Redux and useContext in the same application)
- Deeply nested providers (too many providers)
- Complex providers (too much work in one provider)
- Not optimized for high-frequency changes




Core Redux Concept

- Central data (state) store
** we have ONLY ONE store for entire application **
- Components subscribe the store.
- Components NEVER directly manipulate the store data but we use Reducer function.
- Reducer function mutates(=changes) data in store. 
** it's NOT useReducer hook but general concept as like js reducer method ** 
- How we trigger this reducer function? we have "Actions" and components "Dispatch" actions. (we can say component trigger actions)
- Redux forwards actions to the reducer then this operation is performed by the reducer.
- When the state is updated, subscribing components are notified, so they can update their UI.




How to start redux in the react app

    1. import redux
        import { createStore } from "redux";

    2. create store and reducer function

    3. export default store 
        so we can connect it to react app

    4. import Provider in index.js 
        import { Provider } from "react-redux";

    5. wrap the App into Provider
        root.render(<Provider><App /></Provider>);

    6. import store and set a store props into Provider
        import store from "./store/index";
        <Provider store={store}>

    => it doesn't do anything yet.
        but now App and any child components can tap into the store 
        and they can get the data from store,
        they can set up a subscription to that data,
        they can dispatch actions.




How to use data in a component

    1. import useSelector hook in the component
        import { useSelector } from "react-redux";

    2. useSelector will be excuted by react redux, to retrieve the part of state we need in this component.
        const counter = useSelector((state) => state.counter);

        ** when you use useSelector react-redux will ""automatically set up a subscribtion"" to the redux store for this component. so your component will be ""updated"" and will ""receive the latest conter automatically"" whenever the data changes in Redux store and re-execute component function.




How to dispatch actions in a component

    1. import useDispatch hook in the component
        import { useDispatch } from "react-redux";

    
    2. call useDispatch function
        const dispatch = useDispatch()

        when we call useDispatch we don't pass any argument to it but instead this gives us back a dispatch function which we can execute.

    3. create handler functions and call the dispatch function
        const toggleCounterHandler = () => {
            dispatch({ type: "increment" });
        };





Class based component

    1. import Component from react 
        import { Component } from "react";

    2. build a component from scratch (but this doesn't have state)
        class Counter extends Component {
            render() {
                return (
                <main className={classes.counter}>
                    <h1>Redux Counter</h1>
                    <div className={classes.value}>{counter}</div>
                    <div>
                    <button onClick={incrementHandler}>Increment</button>
                    <button onClick={decrementHandler}>Decrement</button>
                    </div>
                    <button onClick={toggleCounterHandler}>Toggle Counter</button>
                </main>
                );
            }
        }

    3. create handler functions and point them with this keyword
        incrementHandler() {}
        <button onClick={this.incrementHandler}>Increment</button>

    4. import connect hook from react-redux to connect class-based component to redux
        import { connect } from "react-redux";

    5. use connect 
        export default connect()(Counter);
        - we execute connect function then it returns a new function and we execute this returned, this new function as well. and to this returned function, we pass counter.

        - connect wants 2 arguemnts and both of them are functions.
            export default connect(mapStateToProps, mapDispatchToProps)(Counter);

        - set 2 argument functions 
            a function that maps Redux state to props which will be received in this component then.

            // we must use this name for it
            const mapStateToProps = (state) => {
            // it returns a object
                return {
                    counter: state.counter, // we pick up conter state and bind it to counter prop (equivalent to useSelector)
                };
            };

            // equivalent to useDispatch
            const mapDispatchToProps = (dispatch) => {
                return {
                    increment: () => dispatch({ type: "increment" }),
                    decrement: () => dispatch({ type: "decrement" }),
                };
            };
    
    6. use props 
        incrementHandler() {
            this.props.increment();
        }

        <div className={classes.value}>{this.props.counter}</div>

    7. use bind(this) for handlers so it refers to this keyword of this class for sure
        <button onClick={this.incrementHandler.bind(this)}>Increment</button>