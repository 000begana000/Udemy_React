<<< How to manage userAnswers & activeQuestionIndex at the same time with 1 state >>>

const [userAnswers, setUserAnswers] = useState([]);

// because index starts from 0, first has to be 0
const activeQuestionIndex = userAnswers.length;
const quizIsComplete = activeQuestionIndex === QUESTIONS.length;



<<< useEffect() >>>

runs the first argument whenever the dependency is changed.
if the dependency is empty, it will be executed only once,
when the component function runs.



<<< useEffect? not useEffect? >>>

setTimeout(onTimeout, timer);

- this code doesn't need useEffect because..
1. it doesn't cause a infinite loop
2. because it doens't update any prop or state


setInterval(() => {
    setRemainingTime((prevState) => prevState - 100);
  }, 100);

- this code NEED useEffect because...
1. it updates state => component will be re-created
2. and it can cause infinite loop



<<< Clean-up code >>>

useEffect(() => {
    console.log("setInterval");
    const interval = setInterval(() => {
      setRemainingTime((prevRemainingTime) => prevRemainingTime - 100);
    }, 100);

    - "CLEAN UP" function will be executed FIRST then actucal useEffect code to clean up what we've done from the last time
    - or when this component is unmounted from the DOM

    return () => {
      clearInterval(interval);
    };
  }, []);


<<< useCallback() - why we need to use it? >>>

1. let's say we have 2 states in one component and whenever we update one of function, the component will be re-created then some function will be re-created again.

2. and it causes infinite loop with a useEffect() which uses a function as a dependency.

3. so useCallback is like a useEffect but it runs that function "only" when its dependency is changed. 

4. means, it works independently, seperately with other state or render cycle but cares only about its dependency!



<<< built-in React key={} prop >>>

key={} prop is built-in prop in react and when we set a key,
(even though the component is not in a list or a map)
whenever the key changes then the component will be unmounted and demounted