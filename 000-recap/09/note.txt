// Managing State
- try to create state as less as possible
- don't forget to use object to store data efficiently 
const [projectState, setProjectState] = useState({
    selectedProjectId: undefined,   ===> to null dynamically
    projects: [],
});
- find correct title
- use console.log right after, outside of handle function

// Ref
- ref.current <=== must remember
- when the version of React is under 19, we need to use forwardRef
- when we forward a ref, don't forget to connect ref={ref}

// Save function with validation

function handleSave() {
    const enteredTitle = title.current.value;
    const enteredDescription = description.current.value;
    const enteredDate = dueDate.current.value;

    // validation
    if (
      enteredTitle.trim() === "" ||
      enteredDescription.trim() === "" ||
      enteredDate.trim() === ""
    ) {
      // show error modal
      modal.current.open();
      return; // prevent create if the value is invalid
    }

    onAdd({
      title: enteredTitle,
      description: enteredDescription,
      dueDate: enteredDate,
    });
  }


// Format the dueDate

const formattedDate = new Date(project.dueDate).toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
});


// Select a project by its id 

const selectedProject = projectState.projects.find(
    project => project.id === projectState.selectedProjectId
);

- we set a component as default value so we don't need to add more if else statement 
  let content = <SelectedProject project={selectedProject} />;


// Delete a project 

- filter function creates a new array and only truthy items will stay
function handleDeleteProject() {
    setProjectState(prevState => {
        return {
        ...prevState,
        selectedProjectId: undefined, ===> to be default page 
        projects: prevState.projects.filter(
            project => project.id !== prevState.selectedProjectId
        ),
        };
    });
}