Custom hooks
- repetition: rules of hooks 
- why custom hooks?
- creating custom hooks 
- using custom hooks


// Revisitting the "rules of hooks" and why to use hooks 
: Only call hooks in Component or "other hook functions"

as other functions we can outsource the fetching function 
but we use hooks (e.x. useEffect) and state management we can't simply outsource the function - it's not guaranteed working.
=> how can we make it works?


// Creating a custom hook 

we can reuse fetch function everywhere

1. create a folder src/hooks
2. create a file useFetch.js (up to me)
3. create a normal function, starting with 'use' - it's a convention for a hook, it's recognized as a hook to react 


// Custom hook: managing state & returning state values 
: the hook will manage all the related states. 

import { useEffect, useState } from "react";

export function useFetch(fetchFn, initialValue) {
  const [isFetching, setIsFetching] = useState(); // loading
  const [error, setError] = useState(); // error
  const [fetchedData, setFetchedData] = useState(initialValue); // data with flexible initial value 

  useEffect(() => {
    async function fetchData() {
      //genetic name
      setIsFetching(true);
      try {
        const data = await fetchFn(); // genetic name & fetch function from parameter
        setFetchedData(data);
      } catch (error) {
        setError({ message: error.message || "Failed to fetch data." });
      }

      setIsFetching(false);
    }

    fetchData();
  }, [fetchFn]); // it's data from outside, therefore when it's changed, useEffect function has to be called

  // returning state values
  return {
    isFetching,
    error,
    fetchedData,
  };
}

- the returned state from custom hook will belong to the Component which is calling the custom hook 


(App.js) - at this point, to focus on fetching, other functions were commented out 

import { useFetch } from "./hooks/useFetch.js";

// object destructuring to get 3 state values
  const {
    isFetching,
    error,
    fetchedData: userPlaces,
  } = useFetch(fetchUserPlaces, []);


<Places
    places={userPlaces}  <====
/>


// Exposing nested function from the custom hook
expose state updating function to update state independently

** every state managing is managed independently even if we use the same custom hook as we reuse components several times 

(useFetch.js)
return {
    isFetching,
    error,
    fetchedData,
    setFetchedData, // to update data
  };

(App.js)
const {
    isFetching,
    error,
    fetchedData: userPlaces, // change name to userPlaces
    setFetchedData: setUserPlaces, // change name to setUserPlaces
  } = useFetch(fetchUserPlaces, []);


=> now we can add/ remove places 


// Using a custom hook in multiple components 

(AvailablePlaces.jx)

import { useFetch } from "../hooks/useFetch.js";

export default function AvailablePlaces({ onSelectPlace }) {
  const {
    isFetching,
    error,
    fetchedData: availablePlaces,
    setFetchedData: setAvailablePlaces,
  } = useFetch(fetchAvailablePlaces, []);

  useFetch();

===> but how can we able to use geolocation and sortPlacesByDistance function?