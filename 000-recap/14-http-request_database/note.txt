Data Fetching & HTTP requests
:sending & receiving Data via HTTP

- how to connect a backend/ database
- fetching data
- sending data 

// How (not) to connect to a database

- with React, you build a client-side web application (= it runs in the browser)

- You communicate with a backend(API) via HTTP requests 

- You should not try to connect to a database directly (-> credentials would be exeposed)

- Frontend (React app) & backend (API) are often separated (=separate projects)

- You can build a fullstack React app (= blend frontend & backend) via NextJS or Remix


// How NOT to send HTTP Requests 

what is fetch and promise?
Fetch then returns a promise which is a JavaScript value that will eventually resolve to another value.
So it's basically a wrapper object around a value that's not there yet but that will eventually be there.
In this case, it's a wrapper around an eventually received response object.

But this function, which you're passing to then will be executed by the browser only once the response is there. 
So not instantly, but at some point in the future.

useEffect(() => {
    // update UI with get request
    fetch("http://localhost:3000/places")
      .then(response => {
        return response.json(); //returns another promise
      })
      .then(resData => {
        console.log(resData);
        setAvailablePlaces(resData.places);
      });
}, []);


// Using async & await

async/await generally has a few advantages over .then() in terms of readability, maintainability, and error handling. 

useEffect(() => {
    // update UI with get request
    async function fetchPlaces() {
      const response = await fetch("http://localhost:3000/places");
      const resData = await response.json();
      setAvailablePlaces(resData.places);
    }

    fetchPlaces();
  }, []);


// Loading state

(AvailablePlaces)
const [isFetching, setIsFetching] = useState(false);

useEffect(() => {
    // update UI with get request
    async function fetchPlaces() {
      setIsFetching(true); // loading state
      const response = await fetch("http://localhost:3000/places");
      const resData = await response.json();
      setAvailablePlaces(resData.places);
      setIsFetching(false); // loading state
    }

    fetchPlaces();
  }, []);

return (
    <Places
      title="Available Places"
      places={availablePlaces}
      isLoading={isFetching}  // loading state 
      loadingText="Fetching place data..."  // loading state 
      fallbackText="No places available." // loading state - when fetching is failed 
      onSelectPlace={onSelectPlace}
    />
  );

(Places)

{isLoading && <p className="fallback-text">{loadingText}</p>}
{!isLoading && places.length === 0 && (
        <p className="fallback-text">{fallbackText}</p>
      )}
{!isLoading && places.length > 0 && (
        ...contents....
      )}


// Handling HTTP errors 
we commonly need 3 states for fetching data 

1. loading state 
const [isFetching, setIsFetching] = useState(false); 
2. data state 
const [availablePlaces, setAvailablePlaces] = useState([]);
3. error state
const [error, setError] = useState();


try and catch allows you to "stop the application from crashing" and enables you to define which code should be executed instead.

useEffect(() => {
    // update UI with get request
    async function fetchPlaces() {
      setIsFetching(true); // loading state

      try {
        const response = await fetch("http://localhost:3000/placessss");
        const resData = await response.json();

        // 400
        if (!response.ok) {
          throw new Error("Failed to fetch places");
        }

        // update data state when there is no error 
        setAvailablePlaces(resData.places);
      } catch (error) {
        // handle the error - update UI and show an error message to user
        setError({
          message:
            error.message || "Could not fetch places, please try again later",
        }); // error message from Error object & fallback message
      }

      setIsFetching(false); // loading state
    }

    fetchPlaces();
  }, []);


  // error from error state
  if (error) {
    return <ErrorPage title="An error occured!" meessage={error.message} />;
  }


// Transforming fetched data 
the point of this lecture is we can transform the fetched data as we want once we get fetched data. 

  useEffect(() => {
    async function fetchPlaces() {
      setIsFetching(true);

      try {
        const response = await fetch("http://localhost:3000/places");
        const resData = await response.json();

        if (!response.ok) {
          throw new Error("Failed to fetch places");
        }

        // works at some point when we got the position
        // since it works as callback function, we can't await this function, so we should move the setIsFetching, otherwise it's called too fast that before we get the sorted places 
        navigator.geolocation.getCurrentPosition(position => {
          const sortedPlaces = sortPlacesByDistance(
            resData.places,
            position.coords.latitude,
            position.coords.longitude
          );
          setAvailablePlaces(sortedPlaces);
          setIsFetching(false); // call this after we sorting and set the places
        });
      } catch (error) {
        setError({
          message:
            error.message || "Could not fetch places, please try again later",
        });
        setIsFetching(false); // call this after we set error
      }

      // setIsFetching(false); => if it's here, it's called too fast, before we sort the places
    }

    fetchPlaces();
  }, []);


// Extracting code & improving code structure

extract fetching code in http.js

export async function fetchAvailablePlaces() {
  const response = await fetch("http://localhost:3000/places");
  const resData = await response.json();

  if (!response.ok) {
    throw new Error("Failed to fetch places");
  }

  return resData.places;
}

import it in the try block and "await" it, because it returns promise.

import { fetchAvailablePlaces } from "../http.js";

 try {
        const places = await fetchAvailablePlaces();


// Sending data with POST request 

we send the post request at App.js - it has selectedPlaces state
first, create new async funtion at http.js
and call this function in the update UI function 

for post request, we need 3 things : method, body, headers 

export async function updateUserPlaces(places) {
  const response = await fetch("http://localhost:3000/user-places", {
    method: "PUT",
    // const places = req.body.places; => an object with places key
    body: JSON.stringify({ places }), //which data?
    headers: {
      "Content-Type": "application/json", // inform backend the request will be in JSON format
    },
  });

  const resData = await response.json();

  if (!response.ok) {
    throw new Error("Failed to update user data.");
  }

  return resData.message; // if you check the backed data, the response will contain the messsage property. the message will be returned when fetching is successful.
}

update normal function to async function and call the post function in try catch block 

// select places & update the places to the backend
  async function handleSelectPlace(selectedPlace) {
    setUserPlaces(prevPickedPlaces => {
      if (!prevPickedPlaces) {
        prevPickedPlaces = [];
      }
      if (prevPickedPlaces.some(place => place.id === selectedPlace.id)) {
        return prevPickedPlaces;
      }
      return [selectedPlace, ...prevPickedPlaces];
    });

    // load state?
    try {
      await updateUserPlaces([selectedPlace, ...userPlaces]); //userPlaces is not updated yet but scheduled so we can't use userPlaces only
    } catch (error) {
      //...
    }
  }

after this, when we select the places, there is update in user-places.json file. means it works well.


// Using optimistic updating
: instead throw new Error, cancel UI update and showing error message.

const [errorUpdatingPlaces, setErrorUpdatingPlaces] = useState();

  try {
    await updateUserPlaces([selectedPlace, ...userPlaces]);
  } catch (error) {

    // optimistic updating
    setUserPlaces(userPlaces); // not including newly seleted places but old places 
    setErrorUpdatingPlaces({
      message: error.message || "failed to update places.",
    });
  }
}

Create modal for the error message - open modal when there is errorUpdatingPlaces(error) only, 
render ErrorPage when errorUpdatingPlaces only, to prevent error from message={errorUpdatingPlaces.message} 
(if there is no error, message object doesn't exist)

function handleError() {
    setErrorUpdatingPlaces(null); // clear error when user press ESC to close modal
  }

<Modal open={errorUpdatingPlaces} onClose={handleError}>
  {errorUpdatingPlaces && (
    <ErrorPage
      title="An error occured!"
      message={errorUpdatingPlaces.message}
      onConfirm={handleError}
    />
  )}
</Modal>

*** The fetch it self have a default error message which is "Failed to Fetch" and the default message is up to browser.


// Deleting data

when it's successful, filter the selectedPlace
else catch the error and use optimistic updating skill 

const handleRemovePlace = useCallback(
    async function handleRemovePlace() {
      setUserPlaces(prevPickedPlaces =>
        prevPickedPlaces.filter(place => place.id !== selectedPlace.current.id)
      );

      try {
        await updateUserPlaces(
          userPlaces.filter(place => place.id !== selectedPlace.current.id)
        );
      } catch (error) {
        setUserPlaces(userPlaces);
        setErrorUpdatingPlaces({
          message: error.message || "Failed to delete place.",
        });
      }

      setModalIsOpen(false);
    },
    [userPlaces]
  );


// Practice: fetching data 