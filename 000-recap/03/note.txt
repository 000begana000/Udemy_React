// what does do React to JSX code?

React translates JSX (JavaScript XML) into regular JavaScript that browsers can understand. JSX looks like HTML inside JavaScript, making it easier to write and read UI components.

How React Handles JSX:

1. JSX is written in your code
const element = <h1>Hello, World!</h1>;

2. React converts it to JavaScript using Babel
const element = React.createElement("h1", null, "Hello, World!");

3. The browser renders it as HTML
<h1>Hello, World!</h1>

JSX is just a shortcut for writing React elements in a more readable way! 


// Image => Import!!
import reactImg from "./assets/react-core-concepts.png";
<img src={reactImg} alt="Stylized atom" />


// Props Accept All Value Types
function CoreConcept(props) {
  return (
    <li>
      <img src={props.image} alt={props.title} />
      <h3>{props.title}</h3>
      <p>{props.description}</p>
    </li>
  );
}
<CoreConcept
    title="Components"
    description="The core UI building block."
    image={componentsImg}
/>


// Alternative ver. = Short ver.
function CoreConcept({ title, description, image }) {
  return (
    <li>
      <img src={image} alt={title} />
      <h3>{title}</h3>
      <p>{description}</p>
    </li>
  );
}

// they are the same
<CoreConcept
    title={CORE_CONCEPTS[0].title}
    description={CORE_CONCEPTS[0].description}
    image={CORE_CONCEPTS[0].image}
/>
<CoreConcept {...CORE_CONCEPTS[1]} />


// children prop
export default function TabButton({ children }) {
  return (
    <li>
      <button>{children}</button>
    </li>
  );
}
<TabButton>Components</TabButton>


// Passing custom argument to event function
<TabButton onSelect={() => handleSelect("jsx")}>JSX</TabButton>

function handleSelect(selectedButton) {
    // selectedButton => 'components', 'jsx' ...
    console.log(selectedButton);
}

// React execute the component function only once.

// import { useState } from "react"; => start with 'use' are React Hooks
const [selectedTopic, setSelectedTopic] = useState("Initial value");


// && operator will return when the condition is truthy
{!selectedTopic && <p>Please select a topic.</p>}


// Rendering content conditionally
let tabContent = <p>Please select a topic.</p>;

if (selectedTopic) {
    tabContent = (
        <div id="tab-content">
        <h3>{EXAMPLES[selectedTopic].title}</h3>
        <p>{EXAMPLES[selectedTopic].description}</p>
        <pre>
            <code>{EXAMPLES[selectedTopic].code}</code>
        </pre>{" "}
        </div>
    );
}

</menu>
    {tabContent}
</section>


// Dynamic styling

export default function TabButton({ children, onSelect, isSelected }) {
  console.log("TabButton Component Executing");
  return (
    <li>
      <button className={isSelected ? "active" : undefined} onClick={onSelect}>
        {children}
      </button>
    </li>
  );
}

<TabButton
    isSelected={selectedTopic === "components"}
    onSelect={() => handleSelect("components")}
>
    Components
</TabButton>