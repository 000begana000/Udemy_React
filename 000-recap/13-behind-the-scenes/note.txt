- how React updates the DOM
- Avoiding unnecessary updates
- A closer look at keys
- State scheduling & state batching

// How does React update the DOM?
& how are component functions executed?

1. react builds the tree of components

2. check Profiler extention that what components are rendered & why by recording
: this also helps to optimize performance 


// memo

wrap around your component functions so to say, that will prevent unnecessary component function executions.

import { memo } from "react";

const Counter = memo(function Counter({ initialCount }) {
 .....
});

export default Counter;

memo will take a look at the old prop value and at the new prop value that would be received now if that component function would execute and if those prop values are exactly the same which for arrays and objects means that they really have to be exactly the same array or object in memory.

But if they are the same this component function execution here will be prevented by memo.

this counter or component function would only be re executed if initialCount changed or of course if its internal state changed that's not affected by memo.

Memo only prevents function executions that are triggered by the parent component, so the app component.

!!! DON'T OVERUSE MEMO !!!
- Use it as high up in the component tree as possible
: blocking a component execution there will also block all child component executions 

- Checking props with memo() costs performance!
: don't wrap it around all your components - it will just add a lot of unnecessary checks 

- Don't use it on components where props will change frequently
: memo() would just perform a meaningless check in such cases (which costs performance)


// Clever Structuring 

Another technique that is often even more powerful than memo is a clever component composition in your application.


// useMemo
- memo : for component functions
- useMemo: for normal functions in the component function to prevent their execution. it has to be used if you have a "complex" calculation that you want to prevent.

execute the funtion when the dependencies change only

const initialCountIsPrime = useMemo(
    () => isPrime(initialCount),
    [initialCount]
  );

useMemo => prevent re-calculating
useCallback => prevent re-executing(re-creating) function itself


// Virtual DOM
React checks for necessary DOM updates via a "Virtual DOM"
: it creates & compares virtual DOM smapshots to find out which parts of the rendered UI need to be updated

How React updates the Website UI
1. Creating a Component tree 
2. Creating a Virtual Snapshot of the target HTML code
: it's not a real DOM, insdead, it just creates a virtual representation of how that real DOM should look like.
3. Compare New virtual DOM snapshot to previous (old) virtual DOM snapshot 
4. Identify & apply changes to the "real DOM"


// Why keys matter when managing state 
when we use index as a key prop to specify of the component it accours error because the index always stays the same. so avoid to use index as a key but some value that is strictly connected to a specific value. 

- create unique id (this is just an example, Math.random() is not a perfect solution)
const [counterChanges, setCounterChanges] = useState([
    { value: initialCount, id: Math.random() * 1000 },
  ]);

const handleDecrement = useCallback(function handleDecrement() {
    // setCounter((prevCounter) => prevCounter - 1);
    setCounterChanges(prevCounterChanges => [
      { value: -1, id: Math.random() * 1000 },
      ...prevCounterChanges,
    ]);
  }, []);

<CounterHistory history={counterChanges} />

(CounterHistory)
export default function CounterHistory({ history }) {
  log("<CounterHistory /> rendered", 2);

  return (
    <ol>
      {history.map(count => (
        <HistoryItem key={count.id} count={count} />
      ))}
    </ol>
  );
}


// More reasons for why keys matter 
using index as a key polute virtual DOM snapshot and React doesn't recognize which component(element) has been changed or not. so every element with the same key will be updated all again. very not efficient.

but with unique key, react recognize the differences and update only the components have changes. 