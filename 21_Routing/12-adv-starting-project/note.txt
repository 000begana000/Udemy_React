loader()

    1. an extra property in router and it wants a function as a value
    2. and that function will be executed by react router when we are about to visit that route(path).
    3. it execute loader() first then component.
    4. {
            index: true,
            element: <EventsPage />, <=====
            loader: async () => {
              const response = await fetch("http://localhost:8080/events");

              if (!response.ok) {
                // we will deal with incorrect response later
              } else {
                const resData = await response.json();
                return resData.events;   <<======
              }
            },
          },
    5. react router will get the any returned values and be able to use this data at the component (in this case, EventPage)




How to use data from loader

    1. import { useLoaderData } from "react-router-dom";
    2. react dom will get promise data for us so we don't need to worry about whether loader was async function or not.
    3. const data = useLoaderData();
    4. return <EventsList events={data} />;
    5. we can use useLoaderData to the children routes directly
    6. we cannot use it higher routes 




Where should be loader() code to be stored? ====> in the component where you wanna get the response (fetch)

    1. function name is up to me but write the fetching code in Events element 
        export async function loader() {
            const response = await fetch("http://localhost:8080/events");

            if (!response.ok) {
                // we will deal with incorrect response later
            } else {
                const resData = await response.json();
                return resData.events;
            }
        }
    2. import EventsPage, { loader as eventsLoader } from "./components/Events";  ===> App
    3. {
            index: true,
            element: <EventsPage />,
            loader: eventsLoader,  <<======
          },




When does loader execute?

    1. react route will wait for the 1) data fetching first by default and render the 2) component 
    2. we don't need to worry about if there is data or not because it will be rendered when there is data only
    3. we don't need to render a loading state on the Events page




Current route transition state to User :
  wheather it is initiated, waiting for data, or if we are done.

    1. RootLayout
    2. import { useNavigation } from "react-router-dom";
    3. const navigation = useNavigation();
    4. navigation.state ===> has 3 properties in string. idle, loading, submitting
    5. {navigation.state === "loading" && <p>Loading...</p>}
    6. we can see the message already when the transition has started already.
