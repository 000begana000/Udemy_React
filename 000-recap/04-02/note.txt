// <span> Tag
<li>
    <span className="player-name">Player 1</span>
    <span className="player-symbol">X</span>
</li>

The <span> tag is an inline container used to mark up a part of a text, or a part of a document.
The <span> tag is much like the <div> element, but <div> is a block-level element and <span> is an inline element.

// Every custom Component has isolated instances.


// prefix input field 
<input type="text" required value={name} />    ====> use value prop 


// update state based on old state must pass a function for guaranteed latest state value
(X) setIsEditing(!isEditing);
(O) setIsEditing(editing => !editing);

State update are not performed instantly but at some point in the future
(when React has time for it)

In most cases, those state updates of course still are executed almost instantly.


// how to change input & save (2 way binding)
const [playerName, setPlayerName] = useState(initialName);

<input type="text" required value={playerName} onChange={handleChange} />
** updated value is reflexted with state

function handleChange(event) {
    setPlayerName(event.target.value);
}

// Update Object(Array)-State Immutably
Otherwise new value is updated immediately to the old value in memory

const [gameBoard, setGameBoard] = useState(initialGameBoard);

function handleSelectSquare(rowIndex, colIndex) {
    setGameBoard((prevGameBoard) => {
        const updatedBoard = [
            ...prevGameBoard.map((innerArray) => [...innerArray]),
            ];
        updatedBoard[rowIndex][colIndex] = "X";
        return updatedBoard;
    });
}
(another tip)
 <ol id="game-board">
      {gameBoard.map((row, rowIndex) => (

use initialGameBoard just for initial value and now we are using state which to provide latest update to UI 


// lifting state up
State value that's needed by both child 1 & 2, Ancester passes the state value via props to the child components 

(App.jsx)
const [activePlayer, setActivePlayer] = useState("X");

  function handleSelectSquare() {
    setActivePlayer((curActivePlayer) => (curActivePlayer === "X" ? "O" : "X"));
  }

  return (
    <main>
      <div id="game-container">
        <ol id="players" className="highlight-player">
          <Player
            initialName="Player 1"
            symbol="X"
            // to highlight active player
            isActive={activePlayer === "X"}
          />
          <Player
            initialName="Player 2"
            symbol="O"
            isActive={activePlayer === "O"}
          />
        </ol>
        {/* squar get selected here */}
        <GameBoard
          onSelectSquare={handleSelectSquare}
          activePlayerSymbol={activePlayer}
        />

(Player.jsx)
export default function Player({ initialName, symbol, isActive })
<li className={isActive ? "active" : undefined}>

(GameBoard.jsx)
export default function GameBoard({ onSelectSquare, activePlayerSymbol })
function handleSelectSquare(rowIndex, colIndex) {
    setGameBoard((prevGameBoard) => {
      const updatedBoard = [
        ...prevGameBoard.map((innerArray) => [...innerArray]),
      ];
      updatedBoard[rowIndex][colIndex] = activePlayerSymbol;  <=====
      return updatedBoard;
    });

    // this function is executed when square is selected and update activePlayer state
    onSelectSquare();
  }


//updating & handling 2 state updates in one function
function handleSelectSquare(rowIndex, colIndex) {
    setActivePlayer((curActivePlayer) => (curActivePlayer === "X" ? "O" : "X"));
    setGameTurns((prevTurns) => {
      let currentPlayer = "X";

      if (prevTurns.length > 0 && prevTurns[0].player === "X") {
        currentPlayer = "O";
      }

      const updatedTurns = [
        { square: { row: rowIndex, col: colIndex }, player: currentPlayer },
        ...prevTurns,
      ];

      return updatedTurns;
    });
  }


//deriving state from props => use less state 
export default function GameBoard({ onSelectSquare, turns }) {
  let gameBoard = initialGameBoard;

  for (const turn of turns) {
    const { square, player } = turn;
    const { row, col } = square;

    gameBoard[row][col] = player;
  }

//deriving state from gameTurns state (get rid of activePlayer state)
We already have an info of player in gameTurns state - then why do we need extra state?
(outside of App.jsx function)
function deriveActivePlayer(gameTurns) {
  let currentPlayer = "X";

  if (gameTurns.length > 0 && gameTurns[0].player === "X") {
    currentPlayer = "O";
  }

  return currentPlayer;
}

function App() {
  const [gameTurns, setGameTurns] = useState([]);
  // (X) const [activePlayer, setActivePlayer] = useState("X");

  // deriving state: instaed of activePlayer state, we use infos from gameTurns state (every turn makes object with player prop)
  const activePlayer = deriveActivePlayer(gameTurns);

  function handleSelectSquare(rowIndex, colIndex) {
    // (X) setActivePlayer((curActivePlayer) => (curActivePlayer === "X" ? "O" : "X"));

    setGameTurns((prevTurns) => {
      // update gameTurns based on prevTurns
      const currentPlayer = deriveActivePlayer(prevTurns);


// disable button conditionally
<button
  onClick={() => onSelectSquare(rowIndex, colIndex)}
  disabled={playerSymbol !== null}
>


// to check winning combinations (inside of App.jsx)
  let gameBoard = initialGameBoard;

  for (const turn of gameTurns) {
    const { square, player } = turn;
    const { row, col } = square;

    gameBoard[row][col] = player;
  }

  let winner;

  for (const combination of WINNING_COMBINATIONS) {
    // derive infos of every row
    const firstSquarSymbol =
      gameBoard[combination[0].row][combination[0].column];
    const secondSquarSymbol =
      gameBoard[combination[1].row][combination[1].column];
    const thirdSquarSymbol =
      gameBoard[combination[2].row][combination[2].column];

    if (
      // when firstSquarSymbol is not null, check if every symbols are the same
      firstSquarSymbol &&
      firstSquarSymbol === secondSquarSymbol &&
      firstSquarSymbol === thirdSquarSymbol
    ) {
      winner = firstSquarSymbol;
    }
  }
  .
  .
  .
  {winner && <p>You won, {winner}!</p>} <====
  {/* squar get selected here */}
  <GameBoard onSelectSquare={handleSelectSquare} board={gameBoard} />


// implement draw situation too
(App.jsx)
 const hasDraw = gameTurns.length === 9 && !winner; (after winning if statement)
 {(winner || hasDraw) && <GameOver winner={winner} />}
(GameOver.jsx)
{winner && <p>{winner} won!</p>}
{!winner && <p>It's a draw!</p>}


// how to Rematch 
Reset the array to the empty array 
function handleRestart() {
    setGameTurns([]);
  }
<GameBoard onSelectSquare={handleSelectSquare} board={gameBoard} />

it doesn't work first time because we didn't make copy of original array so..
let gameBoard = [...initialGameBoard.map((array) => [...array])];
Please make sure that handle arrays Immutably


// don't lift the state up instead create a new state
Because states in Player.jsx will be updated every key stroke and if we lift up that state to the App.jsx, the App.jsx will be updated every key stroke. and that's what we don't want => create new state in App.jsx
(App.jsx)
const [players, setPlayers] = useState({ X: "Player 1", O: "Player 2" });

function handlePlayerNameChange(symbol, newName) {
    setPlayers((prevPlayers) => {
      return {
        ...prevPlayers,
        [symbol]: newName,
      };
    });
  }

(in if statement)
winner = players[firstSquarSymbol];

 <Player
    initialName="Player 1"
    symbol="X"  <====
    isActive={activePlayer === "X"}
    onChangeName={handlePlayerNameChange} <====
  />

(Player.jsx)
function handleEditClick() {
    setIsEditing((editing) => !editing);

    // trigger when it's on editing mode, when user clicks 'save' button
    if (isEditing) {
      onChangeName(symbol, playerName); // playerName state
    }
}


1. Header (Title of game)

2. 2 Players Slots - Player Components in <ol>
3. useState for Player name & Edit button (editing mode)
4. prefix input field & let it edit with value property 
5. create another state for player name (onChange, 2 way binding)
6. create GameBoard component (3x3)
7. create state for gameboard & update with onClick (!be careful with updating object)

8. create activePlayer state in App.jsx (to share state to 2 children components)
9. Player => isActive by current players symbol 
10. GameBoard => share the function to update state & receive activePlayerSymbol to update symbol on the board

11. for the Log component we need to share the info of array from Gameboard component ===> create new state (gameTurns)
12. add setGameTurns function to handleSelectSquare
13. update Log <li> with gameTurns state

14. get rid of activePlayer state and derive state from gameTurns state
15. disable button conditionally 
16. import winning combinations
17. grab out of initialGameBoard out side of Gameboard.jsx to out side of App.jsx
18. grab out of gameBoard var. and loop of turns to compare winning combinations
19. create a winner var. and if statement to check the winner 
20. print out winner message (temporary)

21. create GameOver component to show the game result
22. in App.jsx & GameOver.jsx implement situation for draw
33. implement Rematch function (watch out of gameBoard var. if we treat the array Immutably)

34. create new players state in App.jsx to keep the player names to print the winner's name
