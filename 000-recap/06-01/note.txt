// Default setting & splitting css

src/index.css <== file address
(src/main.jsx)
import './index.css';

src/components/Header.jsx
src/components/Header.css <== cut and paste all the Header stylings
(Header.jsx)
import "./Header.css";


// Styling react with vanilla css - pros & cons

<Pros> 
- Css code is decoupled from JSX code
- You write css code as you (maybe) know ad (maybe) love it
- Css code can be written by anohter developer who needs only a minial amount of acess to your JSX code

<Cons>
Css code is not scoped to components => Css rules may clash across components (e.g., same css class name used in different components for different purposes)


// Vanila css are not scoped to specific component but applied globally to the page


// Inline styling 
with style prop, apply object in dynamic express {}
 <p
    style={{
        color: "red",
        textAlign: "left",
    }}
>


// Inline styling pros & cons 

<Pros>
- Quick & easy to add to JSX
- Styles only affect the element to which you add them
- Dynamic (conditional) styling is simple

<Cons>
- You need to know css
- You need to style every element individually
- No separation between css & jsx code 


// Inline styling - conditional (with Ternary operator)
style={{ backgroundColor: emailNotValid ? "#fed2d2" : "#d1d5db" }}


// Dynamic value with css className

className={passwordNotValid ? "invalid" : undefined} ===> undefined is very important

we want to set 'label' class everytime but 'invalid' conditionally
<label className="label invalid">Email</label>

with a {} and ``, separated by an empty space between ${}
<label className={`label ${emailNotValid ? "invalid" : ""}`}>


// CSS Modules - Vanilla css with file-specific scoping

Css modules is an approach, a solution that in the end needs to be implemented and enforced by the build process that's used in your React project.
it't not a default browser or Javascript feature. instead css modules is an approach where the build tool will transform your css class names and only those two class names that are guaranteed to be unique per file.

Header.module.css <== file name
(Header.jsx)
import classes from "./Header.module.css"; <== import as an object
<p className={classes.paragraph}>
or
<p className={ 1 === 1 ? classes.paragraph : undefined }>
<p className={`${classes.paragraph}`}>


// Css modules - pros & cons

<pros>
- Css code is decoupled from JSX code
- You write css code as you (maybe) know ad (maybe) love it
- Css code can be written by anohter developer who needs only a minial amount of acess to your JSX code
- Css classes are scoped to the component (files) which import them => no css class name clasehs 

<cons>
- You need to know css 
- You may end up with many relatively small css files in your project


// Styled components 

(install)
npm install styled-components
(import in "component" ex in Header.jsx)
import { styled } from 'styled-components';

- it will create a div as a separate component but a component that will have any styles you want to applied to it.
styled.div

- it's called "Tagged templates" => regular javascript feature
it's like a function which receives this template literal as an input.
styled.div``;

- this overall code will give you will be a React component that automatically returns a div that has these styles applied to it. and that will be a div that internally also uses the special children prop so it can be wrapped around other content.
const ControlContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
`;


// Styled components migrate all the props (we can simply use it as a normal tag)
<Label className={`label ${emailNotValid ? "invalid" : ""}`}>


// Dynamic & conditional styling with styled components 

<Label invalid={emailNotValid}>Email</Label> ==> emailNotValid is boolean

const Label = styled.label`
  display: block;
  margin-bottom: 0.5rem;
  font-size: 0.75rem;
  font-weight: 700;
  letter-spacing: 0.1em;
  text-transform: uppercase;
  color: ${({ invalid }) => (invalid ? "#f87171" : "#6b7280")}; <==
`;


// Avoid built-in props crash => use $ in front of prop name 

<Label $invalid={emailNotValid}>Email</Label>
color: ${({ $invalid }) => ($invalid ? "#f87171" : "#6b7280")};


// Nested rules => replace tag name to &

const StyledHeader = styled.header`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 2rem;
  margin-bottom: 2rem;

  & p {
    text-align: center;
    color: #a39191;
    margin: 0;
  }

  @media (min-width: 768px) {
    & {
      margin-bottom: 4rem;
    }

    & h1 {
      font-size: 2.25rem;
    }

    &:hover {
    background-color: #f0920e;   ===> no space after& for pseudo selector 
  }
  }
`;


// Key of this lecture 

 Simply as a React developer, you should always look for opportunity wehre you can either outsource reusable components that have a certain styling applied to them which you might need in different parts of the application, and/or components that maybe have certain combinations of JSX elements that you might need to reuse in ohter parts of the application.


 // Pros & cons of styled components 

 <pros>
 - Quick & easy to add 
 - You continue "thinking in React" => configurable style functions
 - Styles are scoped to components => No css rule clashes 

 <cons>
 - You need to know css
 - No clear separation of React & Css code 
 - You end up with many relatively small 'wrapper' components 


 // Tailwind  - follow docs to install tailwind 

className="flex flex-col items-center mt-8 mb-16"


// With Tailwind, we can still add custom style like vanilla css in css file & customize style too 

@theme {
  --font-title: "Pacifico", "cursive";
}

<h1 className="font-title">


// Tailwind media queries & pseudo selectors

md:text-4xl  or   hover:bg-amber-500


// Tailwind dynamic & conditional styling 

let labelClasses = "block mb-2 text-xs font-bold tracking-wide uppercase";
let inputClasses = "w-full px-3 py-2 leading-tight border rounded shadow";

** space in front is important 
if (invalid) {
    labelClasses += " text-red-400";
    inputClasses += " text-red-500 bg-red-100 border-red-300";
  } else {
    labelClasses += " text-stone-300";
    inputClasses += " text-gray-700 bg-stone-300";
  }

<label className={labelClasses}>{label}</label>
<input className={inputClasses} {...props} />


// Tailwind pros & cons 

<pros>
- You don't need to know (a lot about) Css
- Rapid development
- No style clashes between components since you don't define any css rules
- Highly configurable & extensible

<cons>
- Relatively long classNmae values 
- Any style changes require editing JSX
- You end up with many relatively small "wrapper" components OR lets of copy & pasting