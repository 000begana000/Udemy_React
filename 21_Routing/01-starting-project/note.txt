What is a Routing?

    - Url changes => Visible content changes
    - Page change = New request + response (HTML requested & loaded)

Building SPAs (Single Page Application)

    when building complex user interfaces, we typically build SPAs.

    => Only one initial HTML request & response

    Page (url) changes are then handled by client-side React code, (watching how the url changes)
    visible content is changed "without" fetching a new HTML file 



Installing React Router & process 

   1. npm install react-router-dom
   2. think which urls we will use and which path(url) will update which content
   3. activate the router and load our route definitions 
   4. have all the components we wanna load 
   5. means of navigating between those pages so our users can move smoothly




Defining Routes

    1. import { createBrowserRouter } from "react-router-dom";
        this allows us to define our routes
    2. createBrowserRouter outside of component function - each {} represent 1 route
        const router = createBrowserRouter([
            {},
            {}
        ]);
    3. create pages folder in src folder (it can be components too) and create components 
    4. write router object
        { path: "/", element: <HomePage />,}
        element can be any jsx code but normally returns a component 
    5. tell React this router should be use 
        1. import { RouterProvider } from "react-router-dom";
        2. return <RouterProvider router={router}/>; // the value of router should be const router above




Alternative way of defining routes

    1. import { createRoutesFromElements, Route } from "react-router-dom";
    2. const routeDefinition = createRoutesFromElements(
            <Route>
                <Route path="/" element={<HomePage />} />
                <Route path="/products" element={<ProductsPage />} />
            </Route>
        );
    3. const router = createBrowserRouter(routeDefinition);




Changing pages without sending http request 

    1. import { Link } from "react-router-dom";
    2. <Link to="/products">Product page</Link>
        Link will listen to click, prevent default, look at the routes definition, 
        and update page without sending new http request.




Layouts & Nested Routes
    1. create MainNavitation component (navbar) components > MainNavitation.js
    2. creae Root.js component pages > Root.js
    3. add new route object with path / and wrap other route definition in children prop
        {
            path: "/",
            element: <RootLayout />,
            children: [
                { path: "/", element: <HomePage /> },
                { path: "/products", element: <ProductsPage /> },
            ],
        },
    4. import { Outlet } from "react-router-dom"; > RootLayout
    5. retrun Outlet - this is a marker where the child routes should be rendered to
        return (
            <>
                <h1>Root Layout</h1>
                <Outlet /> 
            </>
        );
    6. now you can see <h1>Root Layout</h1> acts like wrapper
    7. return <MainNavitation /> instead of <h1>Root Layout</h1> as a navigation in Root component 
        return (
            <>
                <MainNavigation /> <<=          nav 
                <Outlet />                      pages components
            </>
        );
    8. we can have more than 1 root routes for the complex work 




Handling Error Page
    
    1. create Error.js (ErrorPage) pages > Error.js
    2. set the ErrorPage as a fallback error page to the root - it's for the situation when user types wrong route
        path: "/",
        element: <RootLayout />,
        errorElement: <ErrorPage />,    <<==




NavLink 

    NavLink allow us to use special className system :
    <NavLink
        to="/"
        className={({ isActive }) =>                   // isActive is boolean provided by react-router-dom
            isActive ? classes.active : undefined
        }
        end                                 // end means / will be a active path when / comes at the end of the path
    >




useNavigate

    navigate to somewhere imperatively (Programmatically)
    we should use it to navigate something for example when timer is expired 
    this example is just to show how the useNavigate works

    1. import { useNavigate } from "react-router-dom";
    2. const navigate = useNavigate();
    3. inside of handler navigate("/products");
    4. <button onClick={navigateHandler}>Navigate</button>




Dynamic routes according to different products

    1. { path: "/products/:productId", element: <ProductDetail /> } 
        after : is dynamic placeholder and productId is identifier 
    2. with this at the moment /products/something will always navigate to <ProductDetail />
    3. import { useParams } from "react-router-dom";   > ProductDetail
    4. const params = useParams();
    5. params.productId => <p>{params.productId}</p> to print out (productId is the placeholder I set)
    6. we can interact with backend through this approach 




Absolute and Relative paths 

    1. path starts with / after domain we call absoulte path 
    2. if root path is /root, the children path /products won't work (has to be /root/products)
    3. path without / is called relative path 
    4. relative paths are appended after root path 
        products => /root/products but /products is not working 
    5. /products/id => localhost:3000/products/id ====> added after domain directly (absolute)
    6. products/id => localhost:3000/root/products/id ====> appended (relative)
    7. <Link to={product.id}>{product.title}</Link> ====> localhost:3000/root/products/id

    relative prop 

    1. { path: "products/:productId", element: <ProductDetail /> } note that this is directly added as child of /root 
    2. <Link to="..">Back</Link> ===> to go 1 upward of path
    3. http://localhost:3000/root/products/p1 => back => http://localhost:3000/root
    4. because path: "products/:productId" => one upward is just /root
    5. <Link to=".." relative="route"> will work as before (route is default)
    6. <Link to=".." relative="path"> will remove only one segment => back => http://localhost:3000/root/products
    7. <Link to="/something" relative="path"> => relative won't work because it uses absolute path in "to"




Index route 

    { index: true, element: <HomePage /> }
    index: true => default route that should be displayed when parent route is active 