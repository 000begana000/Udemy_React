Prop Drilling: passing shared data through multiple components layers

solution 1 : Component Composition - cons: App should handle too much work and other components are becomes wrapper only
solution 2 : Context API - context value linked to the state and provide the value to the components - can directly reach out to the context (create store folder to the src folder)

Context API

1. create store folder in src folder
2. import { createContext } from react and create Context (give initial value for auto-completion)
3. import the context where we can wrap the components
4. provide context - wrap the components with the context with initial value <Context.Provider value={initial value}>
5. consume context - import { useContext } and the context => const {initialValue} = useContext(context);
6. link context to state - create an object for instance and provide the initial value & functionality we want to expose through this context (!!checkout the App component!!)=> <Context.Provider value={ctxValue}>
7. repeat the same steps to consume functionality in a component
8. checkout alternative way with CartContext.Consumer - but this is not easy to read so it's not a default approach
return(<CartContext.Consumer>{(cartCtx) => {(helper functions) return (jsxcode)}}</CartContext.Consumer>)


Outsourcing context & state 

1. in context file, create provider functionality (e.x. export default function CartContextProvider)
2. grab the state and functionalities from App component and implement it in the provider function
3. return something renderable - e.x. <CartContext.Provider vlaue={ctxValue}>
4. provide {children} prop between opening and closing tag
5. import CartContextProvider instead of CartContext in App component and wrap the other components



UseReducer : a function that reduce one or more complex values to a simpler one

1. import useReducer hook
2. make a variable with useReducer() inside of component function (const [shoppingCartState, shoppingCartDispatch] = useReducer(shoppingCartReducer, initialStateValue))
    const [shoppingCartState, shoppingCartDispatch] = useReducer(
        shoppingCartReducer,
        {
        items: [],
        }
    );
2.a create Reducer function outside of component function function shoppingCartReducer(state, action) {}
2.b state will be guaranteed as a latest state (prevState)
2.c the Reducer function will be called whenever I dispatch 
2.d the initial state value is equvalant (the same) to initial value of state 
2.e use the shoppingCartState (from useReducer function) instead of shoppingCart (from state) in ctxValue

3. instead of all the state update function, we can Dispatch function to dispatch an action - action can be anything we want.
    function handleAddItemToCart(id) {
        shoppingCartDispatch({
            type: "ADD_ITEM",
            payload: id,
        });
    }

    function shoppingCartReducer(state, action) {
        if(action.type === 'ADD_ITEM') {
            // update state
            ** prevState => state / id = action.payload
        }
        return state;
    }

4. I can use useReducer in any component need to use state