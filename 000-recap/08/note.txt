// Ref

import { useRef } from 'react';

const playerName = useRef();

<input ref={playerName} type='text' />

- ref is always a javascript object has current property only.
through current property, I can access all the methods and properties that are exposed by the native input HTML element.
function handleClick() {
    playerName.current.value;
}

- update state
function handleClick() {
    setEnteredPlayerName(playerName.current.value);
}

<h2>
    {enteredPlayerName ? enteredPlayerName : 'unknown entity'}
</h2>

=> {enteredPlayerName ?? 'unknown entity'}
JS expression: if left is truthy, output it, else the right 

=> {enteredPlayerName || 'unknown entity'}
if left falthy, output it, else right 
(if left is truthy, else output right)


// Clear input after submit

(playerName is ref)
playerName.current.value = '';


// Ref can't be used instead of state because it doesn't re-render the component

<state>
- causes component re-evaluation (re-execution) when changed
- should be used for values that are directly reflected in the UI
- should not be used for "behind the scenes" values that have no direct UI impact

<refs>
- do not cause component re-evaluation when changed
- can be used to gain direct DOM element access (-> great for reading values or accessing certain browser APIs)