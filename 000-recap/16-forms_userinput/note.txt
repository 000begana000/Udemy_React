Working with forms & user input

- what's difficult about forms?
- handling form submission & validating user input
- using built-in form features
- building custom solutions

// What are forms & what's tricky about them?
<form submission>
- handling submission is relatively easy
- entered values can be managed via state
- alternatively, they can be extracted via refs
- or via formdata and native browser features

<input validation>
- providing a good user experience is tricky
- you can validate on every keystroke -> errors may be shown too early 
- you can validate on lost focus -> errors may be shown too long


// Handling form submission

** htmlFor = for in html and it works with id in input 
<label htmlFor="email">Email</label>

** page refreshing is happening because form tag sending http request default
=> how to prevent default ?

1. type="button" (default type is submit)
<button type="button" className="button" onClick={handleSubmit}>
    Login
</button>

2. instead of onClick, use onSubmit on <form>
<form onSubmit={handleSubmit}>

function handleSubmit(event) {
    event.preventDefault(); <======
    console.log("submitted!");
}


// Managing & getting user input via state & genetic handlers 

const [enteredValues, setEnteredValues] = useState({
    email: "",
    password: "",
  });

- onchange occurs when the element loses focus, after the content has been changed
  function handleInputChange(identifier, value) {
    setEnteredValues(prevState => ({
      ...prevState,
      [identifier]: value, //already extracted from onChange event
    }));
  }

<input
    id="email"
    type="email"
    name="email"
    onChange={event => handleInputChange("email", event.target.value)}
    value={enteredValues.email}
/>


// Getting user input via Refs 

  const email = useRef();
  const password = useRef();

  function handleSubmit(event) {
    event.preventDefault();
    const enteredEmail = email.current.value;
    const enteredPassword = password.current.value;
    console.log(enteredEmail, enteredPassword);
  }

   <input id="email" type="email" name="email" ref={email} />