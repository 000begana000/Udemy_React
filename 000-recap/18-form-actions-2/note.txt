// Working with Asynchronous form actions 
- before we clear the form, we submit the data to the backend, using context 

// Updating the UI with useFormStatus();
- this hook can't be used in the component in the component that contains the form and the formAction, but instead it must be used in some nested component. some component, inside of form.

- create new component file 
ex) Submit.jsx 

import { useFormStatus } from "react-dom";

- original 
    // const {pending, data, method, action} = useFormStatus();

- we use only pending, returns boolean - submitted or not
    const { pending } = useFormStatus();

- use it conditionally 
    return (
        <p className="actions">
        <button type="submit" disabled={pending}>
            {pending ? "Submitting..." : "Submit"}
        </button>
        </p>
    );


// Registering multiple form actions 
- we can use action prop outside of form tag, in the button tap like this :
    <button formAction={upvoteAction}>

- create functions : there is no input threrfor we don't receive formData
  function upvoteAction() {
    console.log("upvote");
  }

  function downvoteAction() {
    console.log("downvote");
  }


// Sending an HTTP request via a form action 

- create upvote promise function (async/await) - be aware of id 

    async function upvoteOpinion(id) {
        const response = await fetch(
        "http://localhost:3000/opinions/" + id + "/upvote", <=====
        {
            method: "POST",
        }
        );

        if (!response.ok) {
        return;
        }

        setOpinions(prevOpinions => {
        return prevOpinions.map(opinion => {
            if (opinion.id === id) {
            return { ...opinion, votes: opinion.votes + 1 };
            }
            return opinion;
        });
        });
    }


- import context and import functions via use() hook

useContext() — React Hook
Purpose:
To consume a context that was created using React.createContext.

use() — Experimental Hook (as of React 18+) : async resource!!
Purpose:
To suspend rendering until an async resource (like a Promise) is resolved. Often used in Server Components or with async functions in React.

    import { use } from "react";
    import { OpinionsContext } from "../store/opinions-context";


- call the functions
: these functions yield promises so we need to create async await actions

    async function upvoteAction() {
        await upvoteOpinion(id); // comes from props
    }

    async function downvoteAction() {
        await downvoteOpinion(id);
    }


// Using the pending state from useActionState()
: disable button when it's clicked when vote is submitting

    import { useActionState } from "react";

- create 2 useActionStates since we are handling 2 buttons 

    const [upvoteFormState, upvoteFormAction, upvotePending] = useActionState(
        upvoteAction,
        null
    );
    const [downvoteFormState, downvoteFormAction, downvotePending] =
        useActionState(downvoteAction, null);

- use FormAction and Pending to the button : either way of action

    <button
        formAction={upvoteFormAction}
        disabled={upvotePending || downvotePending}
    >


// Adding optimistic updating 
: useOptimistic() hook helps us for optimistic updating.
: vote number is updated immediately but button will be disabled 

- use it where we need to update a piece of UI, in this case in Opinion.jsx 

    <span>{votes}</span>

- import hook 
    import { useOptimistic } from "react";

- [optimisticVotes, setVotesOptimistically] => useOptimistic() returns 2 values as like useState()
- votes => the initial value should update optimistically
- prevVotes => parameter from react, prevState
- mode => a parameter from myself
- when mode is up then +1 vote to the prevVote, otherwise -1

    const [optimisticVotes, setVotesOptimistically] = useOptimistic(
        votes,
        (prevVotes, mode) => (mode === "up" ? prevVotes + 1 : prevVotes - 1)
    );

- setVotesOptimistically can be called in any form actions
- optimisticVotes => ***temporary value while the value is submitted***
- prevVote is always called automatically by react but we should give the secend argument when we call setVotesOptimistically

async function upvoteAction() {

    - call this before we send the request & optimisticVotes will be updated just as like state
    - now the optimisticVotes will be updated immediately then send the request after

    setVotesOptimistically("up");
    await upvoteOpinion(id); // comes from props
  }


- apply optimisticVotes to the span 
    <span>{optimisticVotes}</span>