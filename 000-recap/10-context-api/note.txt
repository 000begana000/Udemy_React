- prop drilling
- component composition
- context
- reducers

//// Comonent composition
(App.jsx)
<Shop onAddItemToCart={handleAddItemToCart}/>

(Shop.jsx)
<ul id="products">
    {DUMMY_PRODUCTS.map(product => (
        <li key={product.id}>
        <Product {...product} onAddToCart={onAddItemToCart} />
        </li>
    ))}
</ul>

get rid of one level of prop drilling by wrapping map & Product component
and using children 

(App.jsx)
<Shop>
    {DUMMY_PRODUCTS.map(product => (
        <li key={product.id}>
        <Product {...product} onAddToCart={handleAddItemToCart} />
        </li>
    ))}
</Shop>

(Shop.jsx)
<ul id="products">{children}</ul>


//// Create Context API
- create a context value and wrap around all components of my app
- it's easily connected to the State
- get rid of prop drilling

1. create src/store folder & shopping-cart-context.jsx

2. (shopping-cart-context.jsx)
import { createContext } from "react";

// the value produced by createContext will be an object that contains a React Component which we'll need later

// this initial value is for auto completion 
(<CartContext.Provider value={{items: []}}>) value =>> initial value
export const CartContext = createContext({
  items: [],
});

3. (App.jsx) - where wraps all the components we need to use that context
import { CartContext } from "./store/shopping-cart-context.jsx";

return (
    // this initial value can be anything, just like a state (real initial value)
    <CartContext.Provider value={{items: []}}>  ====> wrap the components 
      <Header
        cart={shoppingCart}
        onUpdateCartItemQuantity={handleUpdateCartItemQuantity}
      />
      <Shop>
        {DUMMY_PRODUCTS.map(product => (
          <li key={product.id}>
            <Product {...product} onAddToCart={handleAddItemToCart} />
          </li>
        ))}
      </Shop>
    </CartContext.Provider>
  );

4. if you are using react ver.19 or higher, (without .Provider)
<CartContext>
...
 </CartContext>


// Consuming Context

1.
import { useContext } from "react";
import { CartContext } from "../store/shopping-cart-context.jsx";

or import { use } from "react";
- use hook can be used in if block or loops (!not useContext)
- use hook is availble from react v19 or higher

2. (inside of component function)
const cartCtx = useContext(CartContext);
or
const { items } = useContext(CartContext);

3. example : 
{items.length === 0 && <p>No items in cart!</p>}