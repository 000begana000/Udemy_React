- how React updates the DOM
- Avoiding unnecessary updates
- A closer look at keys
- State scheduling & state batching

// How does React update the DOM?
& how are component functions executed?

1. react builds the tree of components

2. check Profiler extention that what components are rendered & why by recording
: this also helps to optimize performance 


// memo

wrap around your component functions so to say, that will prevent unnecessary component function executions.

import { memo } from "react";

const Counter = memo(function Counter({ initialCount }) {
 .....
});

export default Counter;

memo will take a look at the old prop value and at the new prop value that would be received now if that component function would execute and if those prop values are exactly the same which for arrays and objects means that they really have to be exactly the same array or object in memory.

But if they are the same this component function execution here will be prevented by memo.

this counter or component function would only be re executed if initialCount changed or of course if its internal state changed that's not affected by memo.

Memo only prevents function executions that are triggered by the parent component, so the app component.

!!! DON'T OVERUSE MEMO !!!
- Use it as high up in the component tree as possible
: blocking a component execution there will also block all child component executions 

- Checking props with memo() costs performance!
: don't wrap it around all your components - it will just add a lot of unnecessary checks 

- Don't use it on components where props will change frequently
: memo() would just perform a meaningless check in such cases (which costs performance)


// Clever Structuring 

Another technique that is often even more powerful than memo is a clever component composition in your application.