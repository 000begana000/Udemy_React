Redux & Side Effects (and Asynchronous Code)

    - Reducers must be 'pure, side-effect free, synchronous' functions
    => Never send fetch in our reducer!



    
Where should side-effects & async tasks be executed?

    => inside the 'components' (via useEffect())
    => insde the 'action creators' (we write our own)




Fat Reducers vs Fat Components vs Fat Actions

    - Where should your logic(=code) go?
    1. synchronous, side-effect free code (i.e. data transformations)
        => Prefer reducers <=
        Avoid action creators or components 
    2. Async code or code with side-effects
        => Never use Reducers! <=
        Prefer action creators or components 




So How to send request to server?

    1. update Redux store 
    2. select updated store to send the request 

    ** select store & when there is change, send request to server
    => with this way we can keep the logic in reducer & send the request in component (dividing work)

    (App) - but it can be any file 

    const cart = useSelector((state) => state.cart);

    useEffect(() => {
        fetch("https://dummy-59bc5-default-rtdb.firebaseio.com/cart.json", {
        // PUT method will overwrite cart data with new cart data
        method: "PUT",
        body: JSON.stringify(cart),
        });
    }, [cart]);



1) Fetch data inside the components
    1. get our current cart with useSelector before it's updated
    2. do all the transfomation which is doing in reducer "without mutating state"
    3. send a request